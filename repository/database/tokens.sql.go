// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteToken = `-- name: DeleteToken :exec
delete from tokens where id=$1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const getTokenByHash = `-- name: GetTokenByHash :one
select id, created_at, hash, expires_at, scope, user_id from tokens where hash=$1
`

func (q *Queries) GetTokenByHash(ctx context.Context, hash string) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByHash, hash)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Hash,
		&i.ExpiresAt,
		&i.Scope,
		&i.UserID,
	)
	return i, err
}

const storeToken = `-- name: StoreToken :exec
insert into tokens
    (id, created_at, hash, expires_at, scope, user_id) values ($1, $2, $3, $4, $5, $6) 
returning id, created_at, hash, expires_at, scope, user_id
`

type StoreTokenParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Hash      string
	ExpiresAt time.Time
	Scope     string
	UserID    uuid.UUID
}

func (q *Queries) StoreToken(ctx context.Context, arg StoreTokenParams) error {
	_, err := q.db.Exec(ctx, storeToken,
		arg.ID,
		arg.CreatedAt,
		arg.Hash,
		arg.ExpiresAt,
		arg.Scope,
		arg.UserID,
	)
	return err
}
